// 02576 Rendering Framework
// Written by Jeppe Revall Frisvad, 2009
// Copyright (c) DTU Informatics 2009

#ifndef SPECTRUM2XYZ_H
#define SPECTRUM2XYZ_H

/* 
   CIE XYZ color-matching functions
   From Principles of Digital Image Synthesis by Andrew Glassner
   ISBN 1-55860-276-3, Appendix G, p. 1170
   
   Format:
   \lambda in nm, x(\lambda), y(\lambda), z(\lambda), V(\lambda)
*/

static const double CIE_xyz[][5] = {
	{ 380, 0.0014, 0.0000, 0.0065, 0.0000 }, 
	{ 385, 0.0022, 0.0001, 0.0105, 0.0001 },
	{ 390, 0.0042, 0.0001, 0.0201, 0.0001 },
	{ 395, 0.0076, 0.0002, 0.0362, 0.0002 }, 
	{ 400, 0.0143, 0.0004, 0.0679, 0.0004 }, 
	{ 405, 0.0232, 0.0006, 0.1102, 0.0006 }, 
	{ 410, 0.0435, 0.0012, 0.2074, 0.0012 }, 
	{ 415, 0.0776, 0.0022, 0.3713, 0.0022 }, 
	{ 420, 0.1344, 0.0040, 0.6456, 0.0040 }, 
	{ 425, 0.2148, 0.0073, 1.0391, 0.0073 }, 
	{ 430, 0.2839, 0.0116, 1.3856, 0.0116 }, 
	{ 435, 0.3285, 0.0168, 1.6230, 0.0168 }, 
	{ 440, 0.3483, 0.0230, 1.7471, 0.0230 }, 
	{ 445, 0.3481, 0.0298, 1.7826, 0.0298 }, 
	{ 450, 0.3362, 0.0380, 1.7721, 0.0380 }, 
	{ 455, 0.3187, 0.0480, 1.7441, 0.0480 }, 
	{ 460, 0.2908, 0.0600, 1.6692, 0.0600 }, 
	{ 465, 0.2511, 0.0739, 1.5281, 0.0739 }, 
	{ 470, 0.1954, 0.0910, 1.2876, 0.0910 }, 
	{ 475, 0.1421, 0.1126, 1.0419, 0.1126 }, 
	{ 480, 0.0956, 0.1390, 0.8130, 0.1390 }, 
	{ 485, 0.0580, 0.1693, 0.6162, 0.1693 }, 
	{ 490, 0.0320, 0.2080, 0.4652, 0.2080 }, 
	{ 495, 0.0147, 0.2586, 0.3533, 0.2586 }, 
	{ 500, 0.0049, 0.3230, 0.2720, 0.3230 }, 
	{ 505, 0.0024, 0.4073, 0.2123, 0.4073 }, 
	{ 510, 0.0093, 0.5030, 0.1582, 0.5030 }, 
	{ 515, 0.0291, 0.6082, 0.1117, 0.6082 }, 
	{ 520, 0.0633, 0.7100, 0.0782, 0.7100 }, 
	{ 525, 0.1096, 0.7932, 0.0573, 0.7932 }, 
	{ 530, 0.1655, 0.8620, 0.0422, 0.8620 }, 
	{ 535, 0.2257, 0.9149, 0.0298, 0.9149 }, 
	{ 540, 0.2904, 0.9540, 0.0203, 0.9540 }, 
	{ 545, 0.3597, 0.9803, 0.0134, 0.9803 }, 
	{ 550, 0.4334, 0.9950, 0.0087, 0.9950 }, 
	{ 555, 0.5121, 1.0002, 0.0057, 1.0002 }, 
	{ 560, 0.5945, 0.9950, 0.0039, 0.9950 }, 
	{ 565, 0.6784, 0.9786, 0.0027, 0.9786 }, 
	{ 570, 0.7621, 0.9520, 0.0021, 0.9520 }, 
	{ 575, 0.8425, 0.9154, 0.0018, 0.9154 }, 
	{ 580, 0.9163, 0.8700, 0.0017, 0.8700 }, 
	{ 585, 0.9786, 0.8163, 0.0014, 0.8163 }, 
	{ 590, 1.0263, 0.7570, 0.0011, 0.7570 }, 
	{ 595, 1.0567, 0.6949, 0.0010, 0.6949 }, 
	{ 600, 1.0622, 0.6310, 0.0008, 0.6310 }, 
	{ 605, 1.0456, 0.5668, 0.0006, 0.5668 }, 
	{ 610, 1.0026, 0.5030, 0.0003, 0.5030 }, 
	{ 615, 0.9384, 0.4412, 0.0002, 0.4412 }, 
	{ 620, 0.8544, 0.3810, 0.0002, 0.3810 }, 
	{ 625, 0.7514, 0.3210, 0.0001, 0.3210 }, 
	{ 630, 0.6424, 0.2650, 0.0000, 0.2650 }, 
	{ 635, 0.5419, 0.2170, 0.0000, 0.2170 }, 
	{ 640, 0.4479, 0.1750, 0.0000, 0.1750 }, 
	{ 645, 0.3608, 0.1382, 0.0000, 0.1382 }, 
	{ 650, 0.2835, 0.1070, 0.0000, 0.1070 }, 
	{ 655, 0.2187, 0.0816, 0.0000, 0.0816 }, 
	{ 660, 0.1649, 0.0610, 0.0000, 0.0610 }, 
	{ 665, 0.1212, 0.0446, 0.0000, 0.0446 }, 
	{ 670, 0.0874, 0.0320, 0.0000, 0.0320 }, 
	{ 675, 0.0636, 0.0232, 0.0000, 0.0232 }, 
	{ 680, 0.0468, 0.0170, 0.0000, 0.0170 }, 
	{ 685, 0.0329, 0.0119, 0.0000, 0.0119 }, 
	{ 690, 0.0227, 0.0082, 0.0000, 0.0082 }, 
	{ 695, 0.0158, 0.0057, 0.0000, 0.0057 }, 
	{ 700, 0.0114, 0.0041, 0.0000, 0.0041 }, 
	{ 705, 0.0081, 0.0029, 0.0000, 0.0029 }, 
	{ 710, 0.0058, 0.0021, 0.0000, 0.0021 }, 
	{ 715, 0.0041, 0.0015, 0.0000, 0.0015 }, 
	{ 720, 0.0029, 0.0010, 0.0000, 0.0010 }, 
	{ 725, 0.0020, 0.0007, 0.0000, 0.0007 }, 
	{ 730, 0.0014, 0.0005, 0.0000, 0.0005 }, 
	{ 735, 0.0010, 0.0004, 0.0000, 0.0004 }, 
	{ 740, 0.0007, 0.0003, 0.0000, 0.0003 }, 
	{ 745, 0.0005, 0.0002, 0.0000, 0.0002 }, 
	{ 750, 0.0003, 0.0001, 0.0000, 0.0001 }, 
	{ 755, 0.0002, 0.0001, 0.0000, 0.0001 }, 
	{ 760, 0.0002, 0.0001, 0.0000, 0.0001 }, 
	{ 765, 0.0001, 0.0000, 0.0000, 0.0000 }, 
	{ 770, 0.0001, 0.0000, 0.0000, 0.0000 }, 
	{ 775, 0.0000, 0.0000, 0.0000, 0.0000 } };

static const unsigned int CIE_xyz_samples = sizeof(CIE_xyz)/sizeof(CIE_xyz[0]);

inline unsigned int get_nearest_xyz_index(double wavelength)
{
  unsigned int i = (CIE_xyz_samples - 1)/2;
  double n = CIE_xyz_samples/2.0;
  while(n > 0.5)
  {
    n /= 2.0;
    if(wavelength < CIE_xyz[i][0] && i != 0)
      i -= static_cast<unsigned int>(n + 0.5);
    else if(wavelength > CIE_xyz[i][0])
      i += static_cast<unsigned int>(n + 0.5);
    else
      return i;
  }
  return i;
}

inline const double* get_nearest_xyz(double wavelength)
{
  return CIE_xyz[get_nearest_xyz_index(wavelength)];
}

#endif // SPECTRUM2XYZ_H
